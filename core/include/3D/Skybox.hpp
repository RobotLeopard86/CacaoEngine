#pragma once

#include "Graphics/Shader.hpp"
#include "Graphics/Textures/Cubemap.hpp"
#include "Mesh.hpp"
#include "Graphics/Material.hpp"
#include "Utilities/Asset.hpp"
#include "DllHelper.hpp"

#include "glm/vec2.hpp"
#include "glm/mat4x4.hpp"

#include <array>
#include <future>

namespace Cacao {
	/**
	 * @brief A skybox. Implementation is backend-dependent
	 */
	class CACAO_API Skybox : public Asset {
	  public:
		/**
		 * @brief Create a skybox from a cubemap
		 * @note Prefer to use AssetManager::LoadSkybox over direct construction
		 *
		 * @warning Deletes texture as part of destructor
		 *
		 * @param tex A cubemap to use as the skybox texture
		 */
		Skybox(AssetHandle<Cubemap> tex);

		/**
		 * @brief Copy-construct a skybox
		 *
		 * @param other The skybox to copy from
		 */
		Skybox(const Skybox& other)
		  : Asset(other.compiled), rotation(other.rotation), texture(other.texture) {
			_InitCopyND();
		}

		/**
		 * @brief Compile the cubemap asynchronously
		 * @see Cubemap::Compile
		 */
		std::shared_future<void> CompileAsync() override {
			return texture->CompileAsync();
		}

		/**
		 * @brief Compile the cubemap synchronously
		 * @see Cubemap::Compile
		 */
		void CompileSync() override {
			texture->CompileSync();
		}

		/**
		 * @brief Release the cubemap data
		 * @see Cubemap::Release
		 */
		void Release() override {
			texture->Release();
		}

		/**
		 * @brief Check if the cubemap is compiled
		 * @see Cubemap::IsCompiled
		 */
		bool IsCompiled() const override {
			return texture->IsCompiled();
		}

		///@brief Gets the type of this asset. Needed for safe downcasting from Asset
		std::string GetType() const override {
			return "SKYBOX";
		}

		/**
		 * @brief Draw this skybox
		 *
		 * @param projectionMatrix The camera's projection matrix
		 * @param viewMatrix The camera's view matrix
		 *
		 * @note For use by the engine only
		 */
		void Draw(glm::mat4 projectionMatrix, glm::mat4 viewMatrix);

		/**
		 * @brief Set up common skybox resources
		 *
		 * @note Called automatically by the engine during startup
		 *
		 * @throws Exception If common resources were already set up
		 */
		static void CommonSetup();

		/**
		 * @brief Clean up common skybox resources
		 *
		 * @note Called automatically by the engine during shutdown
		 *
		 * @throws Exception If common resources were already cleaned up
		 */
		static void CommonCleanup();

		glm::vec3 rotation;///<The rotation of the skybox

	  private:
		AssetHandle<Cubemap> texture;
		std::shared_ptr<Material> mat;

		//Initialize native data on copy
		void _InitCopyND();

		static Shader* skyboxShader;
		static constexpr float skyboxVerts[] = {
			-1.0f, 1.0f, -1.0f,
			-1.0f, -1.0f, -1.0f,
			1.0f, -1.0f, -1.0f,
			1.0f, -1.0f, -1.0f,
			1.0f, 1.0f, -1.0f,
			-1.0f, 1.0f, -1.0f,
			-1.0f, -1.0f, 1.0f,
			-1.0f, -1.0f, -1.0f,
			-1.0f, 1.0f, -1.0f,
			-1.0f, 1.0f, -1.0f,
			-1.0f, 1.0f, 1.0f,
			-1.0f, -1.0f, 1.0f,
			1.0f, -1.0f, -1.0f,
			1.0f, -1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, -1.0f,
			1.0f, -1.0f, -1.0f,
			-1.0f, -1.0f, 1.0f,
			-1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, -1.0f, 1.0f,
			-1.0f, -1.0f, 1.0f,
			-1.0f, 1.0f, -1.0f,
			1.0f, 1.0f, -1.0f,
			1.0f, 1.0f, 1.0f,
			1.0f, 1.0f, 1.0f,
			-1.0f, 1.0f, 1.0f,
			-1.0f, 1.0f, -1.0f,
			-1.0f, -1.0f, -1.0f,
			-1.0f, -1.0f, 1.0f,
			1.0f, -1.0f, -1.0f,
			1.0f, -1.0f, -1.0f,
			-1.0f, -1.0f, 1.0f,
			1.0f, -1.0f, 1.0f};

		//Vertex shader SPIR-V code (and yes, the name joke is intentional)
		//Generated by glslc at build-time
		static constexpr uint32_t vsCode[] =
#include "skybox.vert.txt"
			;

		//Fragment shader SPIR-V code
		//Generated by glslc at build-time
		static constexpr uint32_t fsCode[] =
#include "skybox.frag.txt"
			;

		static bool isSetup;

		//Backend-implemented data type
		struct SkyboxData;

		std::shared_ptr<SkyboxData> nativeData;
	};
}